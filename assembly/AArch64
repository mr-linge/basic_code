AArch64 是ARMv8-a后支持64位的指令集

内存寻址
支持 48 位内存空间寻址

寄存器介绍
AArch64指令集可以操作34个寄存器,包括31个通用寄存器和3个特殊寄存器(SP、PC、CPSR)
x0~x7  	        依次保存子程序的前8个参数,如果参数个数超过了8个,多余的参数会存在栈上,被调用子程序会通过栈来读取
                x0 保存子程序返回值,64位返回结果采用x0表示,128位返回结果采用x1:x0表示
x8  		    如果方法返回值是一个较大的数据结构时,结果会存在x8指向的地址上
x9~x15 	        临时寄存器
x16~x17         过程内部调用临时寄存器
x18 		    保留的平台寄存器:在内核模式下,指向当前处理器的 KPCR;在用户模式下,指向 TEB
x19~x28         临时寄存器
x29 		    栈指针寄存器FP,指向当前线程的栈底
x30 		    链接寄存器LR,被调用方函数必须保留它以供其返回,但调用方的值将丢失
x31 		    栈指针寄存器SP,指向当前线程的栈顶
x32   	        程序计数器PC,存储当前的执行地址
x33 		    程序状态寄存器CPSR

PC保存当前执行指令的地址,英文原文:
Program counter
The current Program Counter (PC) cannot be referred to by number as if part of the general register file and therefore cannot be used as the source or destination of arithmetic instructions, or as the base, index or transfer register of load and store instructions.
The only instructions that read the PC are those whose function it is to compute a PC-relative address (ADR, ADRP, literal load, and direct branches), and the branch-and-link instructions that store a return address in the link register (BL and BLR). The only way to modify the program counter is using branch, exception generation and exception return instructions.
Where the PC is read by an instruction to compute a PC-relative address, then its value is the address of that instruction. Unlike A32 and T32, there is no implied offset of 4 or 8 bytes.

栈
16 字节对齐

子程序参数传递
前8个参数通过 x0~x7 寄存器传递
从第9个参数开始需要通过栈来访问,第n个参数需要通过sp + (8 * (n-8)) 访问,如:第9个参数需要通过sp + 8 访问


指令
指令长度为 32 位
基本格式如下:
<Opcode>{<Cond>}<S><Rd>,<Rn> {<Opcode2>}
其中各个部分的含义为:
Opcode:         操作码,也就是助记符,说明指令需要执行的操作类型
Cond:           指令执行条件码
S:              条件码设置项,决定本次指令执行是否影响PSTATE寄存器相应状态位值
Rd/Xt:          目标寄存器,A64指令可以选择X0-X30
Rn/Xn:          第一个操作数的寄存器,和Rd一样,不同指令有不同要求
Opcode2:        第二个操作数,可以是立即数,寄存器Rm和寄存器移位方式(Rm,#shit)

演示
F2 FF 9F D2			mov x18, #0xFFFF
little end 字节反序
D2 9F FF F2
对应的机器码
1101 0010100 1111 1111 1111 1111 10010
0-4     5   bit  寄存器编号 18
5-20    16  bit  第二个操作数,这里是立即数 0xFFFF, 正数直接存原码
21-27   7   bit  操作码 mov
28-31   4   bit  条件码 1101 对应的操作数据是正数,1001 对应的操作数据是负数

52 00 80 92				mov x18, #-3
92 80 00 52
对应的机器码
1001 0010100 0000000000000010 10010
0-4     5   bit  寄存器编号 18
5-20    16  bit  第二个操作数,这里是立即数, 负数绝对值 -1 后的原码(3 - 1) 保存下来
21-27   7   bit  操作码 mov
28-31   4   bit  条件码 1101 对应的操作数据是正数,1001 对应的操作数据是负数


Cond        条件码助记符	                      标志	               含义
0000	    EQ	                                Z=1	                相等
0001	    NE(Not Equal)	                    Z=0	                不相等
0010	    CS/HS(Carry Set/High or Same)	    C=1	                无符号数大于或等于
0011	    CC/LO(Carry Clear/LOwer)	        C=0	                无符号数小于
0100	    MI(MInus)	                        N=1	                负数
0101	    PL(PLus)	                        N=0	                正数或零
0110	    VS(oVerflow set)	                V=1	                溢出
0111	    VC(oVerflow clear)	                V=0	                没有溢出
1000	    HI(HIgh)	                        C=1,Z=0	            无符号数大于
1001	    LS(Lower or Same)	                C=0,Z=1	            无符号数小于或等于
1010	    GE(Greater or Equal)	            N=V	                有符号数大于或等于
1011	    LT(Less Than)	                    N!=V	            有符号数小于
1100	    GT(Greater Than)	                Z=0,N=V	            有符号数大于
1101	    LE(Less or Equal)	                Z=1,N!=V	        有符号数小于或等于
1110	    AL	                                任何	             无条件执行(默认)
1111	    NV	                                任何	             从不执行
