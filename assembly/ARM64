ARM64架构
从ARMv8-a后开始支持64位硬件环境,支持超过4G的内存寻址

ARM 64位架构有两种主要的执行状态:
32 位执行状态,包括该状态的异常模型、内存模型、程序员模型和指令集支持
64 位执行状态,包括该状态的异常模型、内存模型、程序员模型和指令集支持
分别对应两套架构的指令集:
AArch32(简称"A32")的 ARM、Thumb、Thumb-2 指令集
AArch64(简称"A64")的 64 位指令集

函数参数传递(ARM64 参数调用规则遵循AAPCS64,规定堆栈为满递减堆栈)
aarch32
arm32下,前4个参数是通过r0~r3传递,第4个参数需要通过sp访问,第5个参数需要通过sp + 4 访问,第n个参数需要通过sp + 4*(n-4)访问。
aarch64
arm64下,前8个参数是通过x0~x7传递,第8个参数需要通过sp访问,第9个参数需要通过sp + 8 访问,第n个参数需要通过sp + 8*(n-8)访问。


指令编码长度
AArch32 :
A32模式(ARM instruction sets),指令固定的编码长度为32bit
T32模式(Thumb instruction sets),指令可以编码成16bit长,也可编码成32bit长
AArch64 :
A64指令集所有指令的长度固定,每条指令是4字节(32bit),没有Thumb指令集


当前正在执行的指令地址
aarch32
在ARM32状态下,当前执行指令的地址通常是pc-8,而在Thumb状态下通常是pc-4
aarch64
在ARM64状态下,当前执行指令的地址通常是pc,英文原文:
Program counter
The current Program Counter (PC) cannot be referred to by number as if part of the general register file and therefore cannot be used as the source or destination of arithmetic instructions, or as the base, index or transfer register of load and store instructions.
The only instructions that read the PC are those whose function it is to compute a PC-relative address (ADR, ADRP, literal load, and direct branches), and the branch-and-link instructions that store a return address in the link register (BL and BLR). The only way to modify the program counter is using branch, exception generation and exception return instructions.
Where the PC is read by an instruction to compute a PC-relative address, then its value is the address of that instruction. Unlike A32 and T32, there is no implied offset of 4 or 8 bytes.


AArch32指令构成
汇编代码 mov r1, #0xff
对应的二进制机器码(little end)
1110 00 1 1101 0 0000 0001 000011111111
指令不同部分功能介绍:
11--0位:	操作数,若为立即数则填该立即数的二进制值,若为通用寄存器则填通用寄存器标号的二进制值
15--12位:	标明目的寄存器
19--16位:	标明第一个源操作数寄存器
20位:		表明该指令是否会影响程序状态字寄存器。是则置1,否则置0
24~21位:	标明指令的类型。mov是 1101
25位:		标志 shifter_operand 段存放的是立即数还是寄存器。若为寄存器则置0,若为立即数则置1。
27~26位:	保留位,恒定为00
31~28位:	条件段 mov 后面没有跟条件,所以为 1110
