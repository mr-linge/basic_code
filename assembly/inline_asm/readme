内嵌汇编

基本语法如下
asm qualifiers (
    code  汇编代码字符串 
    : output operand list 输出操作数约束列表 
    : input operand list 输入操作数约束列表 
    : clobber list 被更改资源列表
    );

1. 语句构成
asm                 表明是一个GNU扩展

qualifiers(修饰词):
volatile            关闭编译器优化
inline              内敛,减小汇编代码尺寸
goto                在内嵌汇编里会跳转到C语言的label

2. 汇编代码字符串
汇编指令的字符串可以使用%[name] 或 %n 的形式来引用C语言变量
如果一行写不完,可以写在多行里,行尾以"\n"结束

3. 操作数约束列表
操作数最多由4部分组成: [name]"modifier+constraint"(C expression)
name                别名(可选)
modifier            修改符(要用双引号括起来)
constraint          限定符(要用双引号括起来)
c表达式              用小括号括起来

modifier	                含义
=	                      表示被修饰的操作数具有可写属性
+	                      表示被修饰的操作数具有可读可写属性
&	                      寄存器只能用于输出(输出操作数中使用"&"修改符,告诉编译器代表输出操作数的寄存器一定不能使用输入操作数已经使用过的寄存器)

constraint	                含义
r	                      通用寄存器
f	                      浮点寄存器
l                         立即数
m	                      内存地址

3.1 输出约束
将寄存器的值映射回C语言变量,形式为  "[modifier][constraint]"(变量名)
例如: "=r"(result)表示将一个通用寄存器的值赋给变量result

3.2 输入约束
将C语言变量映射到寄存器,形式为  "[constraint]"(变量名)
例如: "r"(a)表示将变量a映射到一个通用寄存器

3.3 操作数组成列表
多个操作数通过","分割形成操作数据约束列表

4. clobber list
用于列出内嵌汇编代码可能修改的寄存器,有助于编译器在生成代码时正确处理这些寄存器,多项条件中间用逗号分隔
"memory"    告诉编译器内嵌汇编指令改变了内存的值,强迫编译器在执行该汇编代码前,存储所有缓存的值,在执行完汇编代码之后重新加载该值,目的是防止编译乱序
"cc"        表示内嵌汇编代码影响状态寄存器相关的标志位
例如: "x0", "x1", "cc"表示内联汇编代码可能会修改x0、x1寄存器和条件码寄存器
